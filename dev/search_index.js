var documenterSearchIndex = {"docs":
[{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules  = [DiffusionGarnet]\n","category":"page"},{"location":"reference/#DiffusionGarnet.Domain","page":"Reference","title":"DiffusionGarnet.Domain","text":"Domain(IC::InitialConditionsSpherical, T::Union{Unitful.Temperature,Array{<:Unitful.Temperature{<:Real}, 1}}, P::Union{Unitful.Pressure,Array{<:Unitful.Pressure{<:Real}, 1}}, time_update::Union{Unitful.Time,Array{<:Unitful.Time{<:Real}, 1}}=0u\"Myr\")\n\nWhen applied to spherical initial conditions, define corresponding spherical domain.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffusionGarnet.Domain-2","page":"Reference","title":"DiffusionGarnet.Domain","text":"Domain(IC::InitialConditions2D, T::Union{Unitful.Temperature,Array{<:Unitful.Temperature{<:Real}, 1}}, P::Union{Unitful.Pressure,Array{<:Unitful.Pressure{<:Real}, 1}}, time_update::Union{Unitful.Time,Array{<:Unitful.Time{<:Real}, 1}}=0u\"Myr\")\n\nWhen applied to 2D initial conditions, define corresponding 2D domain.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffusionGarnet.Domain-3","page":"Reference","title":"DiffusionGarnet.Domain","text":"Domain(IC::InitialConditions1D, T::Union{Unitful.Temperature,Array{<:Unitful.Temperature{<:Real}, 1}}, P::Union{Unitful.Pressure,Array{<:Unitful.Pressure{<:Real}, 1}}, time_update::Union{Unitful.Time,Array{<:Unitful.Time{<:Real}, 1}}=0u\"Myr\"; bc_neumann::Tuple=(false, false))\n\nWhen applied to 1D initial conditions, define corresponding 1D domain. bc_neumann can be used to define Neumann boundary conditions on the left or right side of the domain if set to true.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffusionGarnet.Domain-4","page":"Reference","title":"DiffusionGarnet.Domain","text":"Domain(IC::InitialConditions3D, T::Union{Unitful.Temperature,Array{<:Unitful.Temperature{<:Real}, 1}}, P::Union{Unitful.Pressure,Array{<:Unitful.Pressure{<:Real}, 1}}, time_update::Union{Unitful.Time,Array{<:Unitful.Time{<:Real}, 1}}=0u\"Myr\")\n\nWhen applied to 3D initial conditions, define corresponding 3D domain.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffusionGarnet.Domain-5","page":"Reference","title":"DiffusionGarnet.Domain","text":"Domain(IC, T, P, time_update=0u\"Myr\")\n\nReturn a struct containing the struct IC, the PT conditions T and P  and the nondimensionalised parameters of the problem. time_update can be used to update the PT conditions during the simulation. If so, T and P have to be of the same size as time_update and correspond to the values of PT to update to.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffusionGarnet.InitialConditions1D-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, Union{Quantity{T, 𝐋, U}, Level{L, S, Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Quantity{T, 𝐓, U}, Level{L, S, Quantity{T, 𝐓, U}} where {L, S}} where {T, U}}","page":"Reference","title":"DiffusionGarnet.InitialConditions1D","text":"InitialConditions1D(CMg0::Array{<:Real, 1}, CFe0::Array{<:Real, 1}, CMn0::Array{<:Real, 1}, Lx::Unitful.Length, tfinal::Unitful.Time)\n\nReturn a structure containing the initial conditions for a 1D diffusion problem. CMg0, CFe0 and CMn0 need to be in molar fraction. Convert the Lxandtfinal`` to µm and Myr respectively.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DiffusionGarnet.InitialConditions2D-Tuple{AbstractMatrix{<:Real}, AbstractMatrix{<:Real}, AbstractMatrix{<:Real}, Union{Quantity{T, 𝐋, U}, Level{L, S, Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Quantity{T, 𝐋, U}, Level{L, S, Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Quantity{T, 𝐓, U}, Level{L, S, Quantity{T, 𝐓, U}} where {L, S}} where {T, U}}","page":"Reference","title":"DiffusionGarnet.InitialConditions2D","text":"InitialConditions2D(CMg0::Array{<:Real, 2}, CFe0::Array{<:Real, 2}, CMn0::Array{<:Real, 2}, Lx::Unitful.Length, Ly::Unitful.Length, tfinal::Unitful.Time)\n\nReturn a structure containing the initial conditions for a 2D diffusion problem. CMg0, CFe0 and CMn0 need to be in molar fraction. Convert Lx, Ly and tfinal to µm, µm and Myr respectively.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DiffusionGarnet.InitialConditions3D-Tuple{AbstractArray{<:Real, 3}, AbstractArray{<:Real, 3}, AbstractArray{<:Real, 3}, Union{Quantity{T, 𝐋, U}, Level{L, S, Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Quantity{T, 𝐋, U}, Level{L, S, Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Quantity{T, 𝐋, U}, Level{L, S, Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Quantity{T, 𝐓, U}, Level{L, S, Quantity{T, 𝐓, U}} where {L, S}} where {T, U}}","page":"Reference","title":"DiffusionGarnet.InitialConditions3D","text":"InitialConditions3D(CMg0::Array{<:Real, 3}, CFe0::Array{<:Real, 3}, CMn0::Array{<:Real, 3}, Lx::Unitful.Length, Ly::Unitful.Length, Lz::Unitful.Length, tfinal::Unitful.Time)\n\nReturn a structure containing the initial conditions for a 3D diffusion problem. CMg0, CFe0 and CMn0 need to be in molar fraction. Convert Lx, Ly, Lz and tfinal to µm, µm, µm and Myr respectively.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DiffusionGarnet.InitialConditionsSpherical-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}, AbstractVector{<:Real}, Union{Quantity{T, 𝐋, U}, Level{L, S, Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Quantity{T, 𝐓, U}, Level{L, S, Quantity{T, 𝐓, U}} where {L, S}} where {T, U}}","page":"Reference","title":"DiffusionGarnet.InitialConditionsSpherical","text":"InitialConditionsSpherical(CMg0::Array{<:Real, 1}, CFe0::Array{<:Real, 1}, CMn0::Array{<:Real, 1}, Lr::Unitful.Length, tfinal::Unitful.Time)\n\nReturn a structure containing the initial conditions for a spherical diffusion problem. CMg0, CFe0 and CMn0 need to be in molar fraction. Convert Lr and tfinal to µm and Myr respectively.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DiffusionGarnet.simulate","page":"Reference","title":"DiffusionGarnet.simulate","text":"simulate(domain; callback=nothing, progressbar=true)\n\nSolve the coupled diffusion equation using finite differences for a given domain and return a solution type variable.\n\nThe time discretisation is based on the ROCK2 method, a stabilized explicit method (Adbdulle and Medovikov, 2001 ; https://doi.org/10.1007/s002110100292) using OrdinaryDiffEq.jl.\n\nThe solution type variable is following the format of OrdinaryDiffEq.jl (see https://docs.sciml.ai/DiffEqDocs/stable/basics/solution/), and can be used to plot the solution, and to extract the solution at a given time. As the system is nondimensionalised, the time of the solution is in nondimensional time.\n\ncallbacks is an optional argument, which can be used to pass a callback function to the solver. It follows the format of DiffEqCallbacks.jl (see https://docs.sciml.ai/DiffEqCallbacks/stable/).\n\nprogressbar is an optional argument, which can be used to display a progressbar during the simulation. Default is to true.\n\n\n\n\n\n","category":"function"},{"location":"reference/#DiffusionGarnet.simulate-Tuple{DiffusionGarnet.Domain1D}","page":"Reference","title":"DiffusionGarnet.simulate","text":"simulate(domain::Domain1D; callback=nothing, progressbar=true)\n\nSolve the coupled diffusion equation in 1D. Save all timesteps in the output solution type variable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DiffusionGarnet.simulate-Tuple{DiffusionGarnet.Domain2D}","page":"Reference","title":"DiffusionGarnet.simulate","text":"simulate(domain::Domain2D; callback=nothing, progressbar=true)\n\nSolve the coupled diffusion equation in 2D. Save only the first and last timestep in the output solution type variable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DiffusionGarnet.simulate-Tuple{DiffusionGarnet.DomainSpherical}","page":"Reference","title":"DiffusionGarnet.simulate","text":"simulate(domain::DomainSpherical; callback=nothing, progressbar=true)\n\nSolve the coupled diffusion equation in spherical coordinates. Save all timesteps in the output solution type variable.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DiffusionGarnet.update_diffusion_coef-Tuple{Any}","page":"Reference","title":"DiffusionGarnet.update_diffusion_coef","text":"update_diffusion_coef(integrator)\n\nCallback function to update the diffusion coefficients at a given time from a new pressure and temperature. To use with the callback PresetTimeCallback (https://docs.sciml.ai/stable/basics/callbacks/#PresetTimeCallback-1).\n\nFollows the syntax of callback functions defined by DiffEqCallbacks.jl (https://docs.sciml.ai/DiffEqCallbacks/stable/).\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionGarnet.jl","page":"Home","title":"DiffusionGarnet.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Garnet is a mineral commonly used in metamorphic petrology to better understand geological processes, as it occurs in a variety of different rock types. This mineral often exhibits a wide range of compositional zoning, which has been interpreted as recording ranges of pressure (P) and temperature (T) conditions. Modelling diffusion processes can help to better understand this zoning and better constrain the pressure-temperature-time (PTt) conditions of the metamorphic event of interest.","category":"page"},{"location":"","page":"Home","title":"Home","text":"DiffusionGarnet is a Julia package that can be used to model coupled diffusion of major elements on real garnet data. It currently supports 1D, spherical and 2D coordinates for evenly spaced data and is soon to be extended to support 3D coordinates.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DiffusionGarnet may be installed directly from the REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia>]\n  pkg> add DiffusionGarnet\n  pkg> test DiffusionGarnet","category":"page"},{"location":"diffusion_1D/#Diffusion-in-1D","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"","category":"section"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"DiffusionGarnet expects the user to provide real natural data for modelling major element diffusion in garnet. Note that the profiles need to be evenly spaced. A set of example data can be found in the repository of the package in the examples section for 1D profile called Data_grt_1D.txt. This is what we will use for this tutorial.","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"First, we will load the data, which should be in the same folder as your running session:","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"using DiffusionGarnet  # this can take a while\nusing DelimitedFiles\n# load the data of your choice (here from the text file located in https://github.com/Iddingsite/DiffusionGarnet.jl/tree/main/examples/1D, place it in the same folder as where you are running the code)\ndata = DelimitedFiles.readdlm(\"./Data_Grt_1D.txt\", '\\t', '\\n', header=true)[1]\n\nMg0 = data[:, 4]  # load initial Mg mole fraction\nFe0 = data[:, 2]  # load initial Fe mole fraction\nMn0 = data[:, 3]  # load initial Mn mole fraction\nCa0 = data[:, 5]  # load initial Ca mole fraction\ndistance = data[:, 1]","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"We can visualize our data:","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"using Plots\n\nl = @layout [a ; b]\n\np1 = plot(distance, Fe0, label=\"Fe initial\", linestyle = :dash, linewidth=1, dpi=200, title = \"Initial conditions\", legend=:outerbottomright, linecolor=1,xlabel = \"Distance (µm)\", ylabel=\"Molar fraction\")\n\np2 = plot(distance, Mg0, label=\"Mg initial\", linestyle = :dash, linewidth=1, dpi=200,legend=:outerbottomright,linecolor=2,xlabel = \"Distance (µm)\")\np2 = plot!(distance, Mn0, label=\"Mn initial\", linestyle = :dash, linewidth=1, linecolor=3)\np2 = plot!(distance, Ca0, label=\"Ca initial\", linestyle = :dash, linewidth=1, linecolor=4, ylabel=\"Molar fraction\")\n\nplot(p1, p2, layout = l)","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"which output:","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"(Image: Initial conditions.)","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"Then, we will define 2 structures that DiffusionGarnet requires, which will contain all the information it needs to run a simulation.","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"Lx = (data[end,1] - data[1,1])u\"µm\"  # length in x of the model, here in µm\ntfinal = 15u\"Myr\"  # total time of the model, here in Myr\n\n# define the initial conditions in 1D of your problem in that order.\nIC1D = InitialConditions1D(Mg0, Fe0, Mn0, Lx, tfinal)\n\n# define the pressure and temperature conditions of diffusion\nT = 900u\"°C\"\nP = 0.6u\"GPa\"\n\n# define a Domain struct containing the definition of our problem and nondimensionalised variables\ndomain1D = Domain(IC1D, T, P)","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"Note that Lx, tfinal, T and P need to contain units, following the syntax of the package Unitful. This allows the user to specify the units that suit their problem.  Domain1D contains all the information that DiffusionGarnet needs to solve our coupled diffusion problem, at 900 °C and 0.6 GPa for a duration of 15 Myr.","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"This can be achieved with the function simulate():","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"# solve the problem using DifferentialEquations.jl\nsol = simulate(domain1D)","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"simulate() is using the package DifferentialEquations.jl behind the hood to solve efficiently our problem. The sol variable is the common solution type from this package and more information can be found here. It basically holds all the information from our simulation.","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"We can now plot the solutions of our problem. Note that for plotting the timestep, we need to dimensionalise back the time from the model, using the characteristic time t_charact defined in domain1D.","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"# extract characteristic time to convert back to dimensional time\n@unpack tfinal_ad, t_charact = domain1D\n\nanim = @animate for i = LinRange(0, tfinal_ad, 100)\n    l = @layout [a ; b]\n\n    p1 = plot(distance, Fe0, label=\"Fe initial\", linestyle = :dash, linewidth=1, dpi=200, title = \"Timestep = $(round(((i)* t_charact);digits=2)) Ma\", legend=:outerbottomright, linecolor=1,xlabel = \"Distance (µm)\")\n    p1 = plot!(distance, sol(i)[:,2], label=\"Fe\",linecolor=1, linewidth=1)\n\n\n    p2 = plot(distance, Mg0, label=\"Mg initial\", linestyle = :dash, linewidth=1, dpi=200,legend=:outerbottomright,linecolor=2,xlabel = \"Distance (µm)\")\n    p2 = plot!(distance, Mn0, label=\"Mn initial\", linestyle = :dash, linewidth=1, linecolor=3)\n    p2 = plot!(distance, Ca0, label=\"Ca initial\", linestyle = :dash, linewidth=1, linecolor=4)\n    p2 = plot!(distance, sol(i)[:,1], label=\"Mg\",linecolor=2, linewidth=1)\n\n    p2 = plot!(distance, sol(i)[:,3], label=\"Mn\", linecolor=3, linewidth=1)\n\n    p2 = plot!(distance, 1 .- sol(i)[:,1] .- sol(i)[:,2] .- sol(i)[:,3], label=\"Ca\", linecolor=4, linewidth=1)\n\n    plot(p1, p2, layout = l)\nend every 1\n\nprintln(\"Now, generating the gif...\")\ngif(anim, \"./Grt_1D_test.gif\", fps = 7)\nprintln(\"...Done!\")","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"Here is the resulting gif obtained:","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"(Image: 1D diffusion profil of a garnet)","category":"page"},{"location":"diffusion_1D/","page":"Diffusion in 1D","title":"Diffusion in 1D","text":"It represents the compositional evolution of a 1D profile through a garnet grain with homogeneous dirichlet boundaries on both sides.","category":"page"}]
}
